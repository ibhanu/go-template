name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: go_server_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go install github.com/steebchen/prisma-client-go@latest
          go install mvdan.cc/gofumpt@latest
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Generate Prisma client
        run: make prisma-generate

      - name: Run tests with coverage
        run: |
          make test-coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/go_server_db

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out,./coverage.txt

      - name: Build for multiple platforms
        run: |
          # Create artifacts directory
          mkdir -p artifacts

          # Build for Linux
          GOOS=linux GOARCH=amd64 go build -o artifacts/go-server-linux-amd64 .
          tar -czf artifacts/go-server-linux-amd64.tar.gz -C artifacts go-server-linux-amd64

          # Build for MacOS
          GOOS=darwin GOARCH=amd64 go build -o artifacts/go-server-darwin-amd64 .
          tar -czf artifacts/go-server-darwin-amd64.tar.gz -C artifacts go-server-darwin-amd64

          # Build for Windows
          GOOS=windows GOARCH=amd64 go build -o artifacts/go-server-windows-amd64.exe .
          zip -j artifacts/go-server-windows-amd64.zip artifacts/go-server-windows-amd64.exe

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            artifacts/go-server-linux-amd64.tar.gz
            artifacts/go-server-darwin-amd64.tar.gz
            artifacts/go-server-windows-amd64.zip

      - name: Build Docker image
        run: make docker-build

      - name: Get latest version and increment
        if: github.ref == 'refs/heads/main'
        id: next_version
        run: |
          set -euo pipefail

          # Function to validate version components
          validate_version() {
            local ver=$1
            if ! [[ "$ver" =~ ^[0-9]+$ ]]; then
              echo "Error: Invalid version component: $ver" >&2
              return 1
            fi
            if [ "$ver" -lt 0 ]; then
              echo "Error: Version component cannot be negative: $ver" >&2
              return 1
            fi
            return 0
          }

          # Fetch tags efficiently (limit depth and don't fetch commits)
          echo "Fetching tags..."
          git fetch --tags --depth=1 2>/dev/null || {
            echo "Warning: Failed to fetch tags, defaulting to v0.0.0"
            LATEST_TAG="v0.0.0"
          }
          
          # Get latest tag with better error handling
          if ! LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | head -n 1 2>/dev/null); then
            echo "No existing tags found, defaulting to v0.0.0"
            LATEST_TAG="v0.0.0"
          fi
          
          echo "Latest tag found: $LATEST_TAG"
          
          # Extract and validate version components
          if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            # Validate each component
            validate_version "$MAJOR" && \
            validate_version "$MINOR" && \
            validate_version "$PATCH" || {
              echo "Warning: Invalid version components, resetting to v0.0.0"
              MAJOR=0
              MINOR=0
              PATCH=0
            }
          else
            echo "Warning: Tag format invalid, defaulting to v0.0.0"
            MAJOR=0
            MINOR=0
            PATCH=0
          fi
          
          # Increment patch version with overflow protection
          if [ "$PATCH" -eq 999999 ]; then
            echo "Warning: Patch version at maximum, incrementing minor version"
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          # Construct and validate next version
          NEXT_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEXT_VERSION"
          
          # Verify version format
          if ! [[ $NEXT_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Generated version is invalid: $NEXT_VERSION" >&2
            exit 1
          fi
          
          # Set outputs with validation
          {
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
            echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          } || {
            echo "Error: Failed to set version outputs" >&2
            exit 1
          }
          
          echo "Successfully generated next version: $NEXT_VERSION"
      
      - name: Create and push new tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          
          # Check if tag already exists
          if ! git rev-parse "${{ env.NEXT_VERSION }}" >/dev/null 2>&1; then
            echo "Creating new tag ${{ env.NEXT_VERSION }}"
            git tag -a ${{ env.NEXT_VERSION }} -m "Auto-generated release ${{ env.NEXT_VERSION }}"
            
            echo "Pushing new tag to origin"
            if git push origin ${{ env.NEXT_VERSION }}; then
              echo "Successfully pushed tag ${{ env.NEXT_VERSION }}"
            else
              echo "Failed to push tag ${{ env.NEXT_VERSION }}"
              exit 1
            fi
          else
            echo "Tag ${{ env.NEXT_VERSION }} already exists"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/main' && success() && env.NEXT_VERSION != ''
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEXT_VERSION }}
          name: Release ${{ env.NEXT_VERSION }}
          draft: false
          prerelease: false
          files: |
            artifacts/go-server-linux-amd64.tar.gz
            artifacts/go-server-darwin-amd64.tar.gz
            artifacts/go-server-windows-amd64.zip
          body: |
            ## Release ${{ env.NEXT_VERSION }}
            
            ### Changes
            - Auto-generated release from main branch
            
            ### Assets
            - go-server-linux-amd64.tar.gz: Linux AMD64 binary
            - go-server-darwin-amd64.tar.gz: macOS AMD64 binary
            - go-server-windows-amd64.zip: Windows AMD64 binary
